一. 数据结构
1.  数组

特点: 顺序存储,通过下标访问, array[i], 支持随机访问,性能非常好

删除时,发生大量的元素移动  (a = [1 ,3, 5, 7, 8]), 随机插入和删除性能不佳

   --假如初始时大小为5, 插入一个新元素,发现空间不够了, 申请新空间10, 将原来的内容拷贝过去

2. 栈
特点:先进后出,后进先出
适用场景:递归

3.  队列
    特点:先进先出,后进后出
    使用场景:在多线程阻塞队列管理中非常适用
    双端队列:两端都可以插入和删除

4. 链表
    特点: 一般指单链表 节点有两个属性: 值(data), next指针(存放下一个元素的地址), 在内存里面链表的节点存放的地址是不连续的
    适用场景: 适合顺序访问,不适合随机访问; 适合频繁随机插入和删除
    
5. 树
   特点: 分叉, 但没有环
   适用场景: 查询很快, 二分查找

6. 散列表/哈希表
   特点:    本质是取模,  把分布不均匀的数据通过取模变得均匀
   适用场景: 字典

7. 堆
   实际是一颗二叉树
   大顶堆: 父亲节点值一定比孩子节点大,  节点的左孩子比右孩子数值小
   小顶堆: 父亲节点值一定比孩子节点小,  节点的左孩子比右孩子数值小

8. 图
   特点: 可能有环的存在, 顶点集合,边集合

单链表反转
A ->B->C->D
需要反转: D->C->B->A
方法一: 借助中间数组
方法二: 借助两个临时变量

链表相交:
方法一:借助两个临时数组
方法二:转变为链表是否有环的问题:  操场跑步追尾现象, 两个指针遍历链表(一快一慢,若再相遇则链表有环)
       
pylint 代码质量检查  code review

二. 算法
时间复杂度计算   --- 非常重要
1. 子集和			oldboy/algo/subset_sum.py
递归
LRU_cache

2. 硬币组合问题   : 学会由特殊推理到一般情况    oldboy/algo/coin_combination.py
奇偶性:
n元为偶数: 先10元, 再5元,再2元
n元为奇数: 代表着一定有一张5元, y-1,  n=n-5 变成了偶数

泛化后: A1张x类型的纸币,A2张y类型的纸币, AN张Zn类型纸币
解题思路:
1. 最小公倍数
2. 余数组合,比如 余数(对最小公倍数取模)1  5*1+2*3
3. 逐一判断各类型纸币不足的情况,找出一种符合的结果

3. 洗牌算法 :   游戏里面应用非常广泛      oldboy/algo/shuffle_card.py
[1, 2, 3, ... ,54]
方法一:  时间复杂度O(N), 空间复杂度O(1)
第一次: 从2到54张牌中随机取一张和第一张牌交换
	如 随机到26 ,   交换后[26, 2, 3, ...., 25, 1, 27, 54]
第二次: 从第3张到54张牌中随机取一张和第2张牌交换
	如随机到16     交换后[26, 16, 3, ..., 15, 2, 17, ..25, 1, 27, 54]
...

方法二:     空间O(N)
先申请一个新数组,把原数组拷贝过来,之后再按照方法一


4. 数组旋转   --  多种解法, 相对比较巧妙  oldboy/algo/reverse_array.py
[
   1 2 3
   4 5 6
   7 8 9
]
方法一:
1. 先行做列,列做行产生一个新数组
[
   1 4 7
   2 5 8
   3 6 9
]
[].reverse()

方法二:
四种情况：
    1. 90度，依次去每列第i个元素（降序），如第行数为m, 列数为n，则取第n列第i个元素，第n-1列第i个元素…；

    2. 180度，依次去每行第i个元素（降序），如第行数为m, 列数为n，则取第i行第n个元素，第i行第n-1个元素…；

    3. 270度，依次去每列第i个元素（升序），如第行数为m, 列数为n，则取第i列第k个元素，第i+1列第k个元素…；

    4. 360度，原数组不变 

第三种思路:
先求出90度的情况,然后旋转n次90度就行,但性能不是很好


三. 游戏架构
game server 和web server区别
1. 会话存在形式不一样: web开发一般用的redis等;游戏里面一般存在进程里
2. 交互频率和消息走向不一样:
	web server 单向交互, client发起, server端不能主动推送消息
	game server 双端交互, 交互频率很高
3. 协议: web server 使用http   
	game server 私有化协议


egret  ts语言,和js非常像
监控
主机监控:主机,cpu,内存, 硬盘 ...
服务监控: 登录服务是否可用,延迟多久,mysql卡顿... 
业务逻辑监控:  验证业务是否正确或者被篡改, 对账系统

DevOps
jenkins
ELK(日志系统) = Elasticsearch(搜索引擎) + logstash(日志收集工具)+ kibana(web控制台)
老南孩  老男孩

MQ = Message Queue
  kafka 单机百万并发
周期性任务: linux crontab
	开源jiacrontab分布式任务系统
	celery
	
架构设计:
1. 框架,DB部分,表设计
2. 系统设计,消息走向
	负载均衡/监控/运维/测试/预警



小作业:
1. 设计一个算法实现开方(不使用开方函数),如求根号2, 小数点后保留3位有效数字  根号2 = 1.414
求根号287 = ?
二分逼近
第一次1 平方 1
第二次2  平方 4 
...
16 平方 = 256
17 平方 = 289
发现在16 到17之间
16.1* 16.1 = ?
16.6-16.7
   16.61-16.69




